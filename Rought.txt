Points to consider while writing scripts:
1) any url or env should be maintain in the variable.
2) If possible make data parameterization using config or execl doc.
3) Use POM , create functions for recursive use.
4) Create functions for generic actions
5) Handle exception.
6) Apply assert for checking the test cases.


--html=reports/report.html
--alluredir=allure_results
allure generate --single-file test/allure-results

-----------
old yaml

# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: ubuntu-latest

jobs:
- job: TestAndGenerateReport
  displayName: 'Test and Generate Allure Report'
  strategy:
    matrix:
      Python39:
        python.version: '3.9'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
    displayName: 'Install dependencies'

  - script: |
      pip install pytest pytest-azurepipelines
      pip install allure-pytest
      pytest test/ccportal_api_automation.py
    displayName: 'Run API tests'

  - script: |
      pytest tests --alluredir=allure-results
    displayName: 'Generate Allure Results'


  - script: |
      allure generate --single-file allure-results
    displayName: 'Generate Allure Report'

  - script: |
      pip install pytest pytest-azurepipelines
      pytest test/ccportal_email.py
    displayName: 'Run Email tests'

  - script: |
      rm -f test/allure-results/*.json
    displayName: 'Delete JSON Files'

------------------------------------------->>>>>>>>

# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    Python39:
      python.version: '3.9'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pip install allure-pytest
    pytest test/ccportal_api_automation.py --alluredir=allure-results
    pytest test/ccportal_generate_report.py
    pytest test/ccportal_email.py


  displayName: 'pytest'

  ---------------------->>>>>>>>>>>>> working yml2

  trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest pytest-azurepipelines
    pip install allure-pytest
    pip install requests  # Install the requests module
  displayName: 'Install dependencies'

- script: |
    pytest test/ccportal_api_automation.py --alluredir=allure-results
  displayName: 'Run API automation tests'

- script: |
    sudo apt-get update
    sudo apt-get install wget unzip -y  # Install wget and unzip
    wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.15.0/allure-commandline-2.15.0.zip -O allure.zip
    unzip allure.zip -d /opt
    export PATH=$PATH:/opt/allure-2.15.0/bin

    allure generate allure-results -o allure-report --clean
  displayName: 'Generate Allure report'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'allure-report'
    artifact: 'allure-report'

    ------------------------------
    FINAL WORKING

    trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest pytest-azurepipelines
    pip install allure-pytest
    pip install requests
  displayName: 'Install dependencies'

- script: |
    pytest test/ccportal_api_automation.py --alluredir=allure-results
  displayName: 'Run API automation tests'

- script: |
    sudo apt-get update
    sudo apt-get install wget unzip -y
    wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.15.0/allure-commandline-2.15.0.zip -O allure.zip
    unzip allure.zip -d /opt
    export PATH=$PATH:/opt/allure-2.15.0/bin
    allure generate allure-results --clean -o allure-report
  displayName: 'Generate Allure report'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'allure-report'
    artifactName: 'Allure Report'
    publishLocation: 'Container'
  displayName: 'Publish Allure report as artifact'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $organization = "susmitsurwade"
      $project = "SusmitDemo"
      $buildId = "$(Build.BuildId)"

      $url = "$(System.CollectionUri)_apis/build/builds/$buildId/artifacts?artifactName=Allure%20Report&api-version=7.1-preview.5"

      $emailBody = "Please find the Allure report here: $url"

      $smtpServer = "smtp.gmail.com"
      $smtpPort = 587
      $from = "susmit.s.surwade@gmail.com"
      $to = "susmit.surwade@blenheimchalcot.com"
      $subject = "Allure Report"

      $username = "susmit.s.surwade@gmail.com"
      $password = ConvertTo-SecureString "qzod ltfm nmav tqvw" -AsPlainText -Force
      $credentials = New-Object System.Management.Automation.PSCredential ($username, $password)

      Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -UseSsl -From $from -To $to -Subject $subject -Body $emailBody -Credential $credentials
  displayName: 'Send Email Notification'
-------------
ALLURE attachment html


trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest pytest-azurepipelines
    pip install allure-pytest
    pip install requests
  displayName: 'Install dependencies'

- script: |
    pytest test/ccportal_api_automation.py --alluredir=allure-results
  displayName: 'Run API automation tests'

- script: |
    sudo apt-get update
    sudo apt-get install wget unzip -y
    wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.15.0/allure-commandline-2.15.0.zip -O allure.zip
    unzip allure.zip -d /opt
    export PATH=$PATH:/opt/allure-2.15.0/bin
    allure generate allure-results --clean -o allure-report --format html
  displayName: 'Generate Allure HTML report'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $organization = "susmitsurwade"
      $project = "SusmitDemo"
      $buildId = "$(Build.BuildId)"

      # Construct the URL to the HTML report
      $url = "$(System.CollectionUri)_apis/build/builds/$buildId/artifacts?artifactName=Allure%20Report&api-version=7.1-preview.5"

      # Construct the email body with the Allure report URL
      $emailBody = "Please find the Allure report here: $url"

      # Attach the HTML report to the email
      $attachmentPath = "allure-report/index.html"

      # SMTP configuration
      $smtpServer = "smtp.gmail.com"
      $smtpPort = 587
      $from = "susmit.s.surwade@gmail.com"
      $to = "susmit.surwade@blenheimchalcot.com"
      $subject = "Allure Report"

      # SMTP credentials
      $username = "susmit.s.surwade@gmail.com"
      $password = ConvertTo-SecureString "qzod ltfm nmav tqvw" -AsPlainText -Force
      $credentials = New-Object System.Management.Automation.PSCredential ($username, $password)

      # Send email with the Allure report URL and attach the HTML report
      Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -UseSsl -From $from -To $to -Subject $subject -Body $emailBody -Attachments $attachmentPath -Credential $credentials
  displayName: 'Send Email Notification'
  --------------------------------------------
  trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest
    pip install pytest-html
    pip install requests  # Added requests module installation
  displayName: 'Install dependencies'

- script: |
    pytest test/ccportal_api_automation.py --html=report.html
  displayName: 'Run pytest and generate HTML report'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '*.css'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'report.html'
    artifactName: 'TestReport'

- task: PythonScript@0
  inputs:
    scriptSource: 'inline'
    script: |
      import smtplib
      from email.mime.multipart import MIMEMultipart
      from email.mime.text import MIMEText
      from email.mime.base import MIMEBase
      from email import encoders

      # Email configuration
      smtp_server = 'smtp.gmail.com'
      smtp_port = 587
      sender_email = 'susmit.surwade@blenheimchalcot.com'
      receiver_email = 'susmit.surwade@blenheimchalcot.com'
      password = 'qzod ltfm nmav tqvw'

      # Create a multipart message
      message = MIMEMultipart()
      message['From'] = sender_email
      message['To'] = receiver_email
      message['Subject'] = 'Test Report'

      # Email body
      body = 'Please find the attached pytest HTML report.'
      message.attach(MIMEText(body, 'plain'))

      # Attachment
      attachment_path = 'report.html'
      with open(attachment_path, 'rb') as attachment:
          part = MIMEBase('application', 'octet-stream')
          part.set_payload(attachment.read())
      encoders.encode_base64(part)
      part.add_header(
          'Content-Disposition',
          f'attachment; filename= {attachment_path.split("/")[-1]}'
      )
      message.attach(part)

      # Send email
      with smtplib.SMTP(smtp_server, smtp_port) as server:
          server.starttls()
          server.login(sender_email, password)
          server.sendmail(sender_email, receiver_email, message.as_string())
  displayName: 'Send Email with attached HTML report'
  -------------------------------------------------------
  WORKING HTML REPORT FILE

  trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest
    pip install pytest-html
  displayName: 'Install dependencies'

- script: |
    pytest test/ccportal_api_automation.py --html=report.html
    # Copy the CSS file to the artifact directory
    cp assets/style.css $(Build.ArtifactStagingDirectory)/
  displayName: 'Run pytest and generate HTML report'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '.'
    artifactName: 'TestReport'
    ------------------------------------
    Working self html report creation w/o mail.

    trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest
    pip install pytest-html
    pip install requests  # Install the requests module
  displayName: 'Install dependencies'

- script: |
    pytest test/ccportal_api_automation.py --html=report.html --self-contained-html
  displayName: 'Run pytest and generate self-contained HTML report'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'report.html'
    artifactName: 'TestReport'

    ----------
    final working attached html

    trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest
    pip install pytest-html
    pip install requests  # Install the requests module
  displayName: 'Install dependencies'

- script: |
    pytest test/ccportal_api_automation.py --html=report.html --self-contained-html
  displayName: 'Run pytest and generate self-contained HTML report'

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'report.html'
    artifactName: 'TestReport'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # SMTP configuration for Gmail
      $smtpServer = "smtp.gmail.com"
      $smtpPort = 587
      $from = "susmit.s.surwade@gmail.com"
      $to = "susmit.surwade@blenheimchalcot.com"

      # Get today's date
      $todayDate = Get-Date -Format "yyyy-MM-dd"

      # Set the email subject
      $subject = "Daily API Automation report for $todayDate"

      # SMTP credentials
      $username = "susmit.s.surwade@gmail.com"
      $password = "qzod ltfm nmav tqvw"
      $organization = "susmitsurwade"
      $project = "SusmitDemo"

      # Email body
      $emailBody = "Please find the attached pytest HTML report."

      # Path to the HTML report
      $attachmentPath = "$(System.DefaultWorkingDirectory)/report.html"

      # Send email with attached HTML report using TLS/SSL
      $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)
      Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -From $from -To $to -Subject $subject -Body $emailBody -Attachments $attachmentPath -Credential $credential -UseSsl
  displayName: 'Send Email with attached HTML report'
-----------------------------
email html:

body = f"""
    <html>
      <body>
        <p><b>Voice Files count showing on PRODUCTION Brocaly portal on {today_date}(IST) as below:</b></p>
        <ul>
          <li>Organisation: Oakbrook</li>
          <li>Total Files Received in Azure blob storage: {azure_count}</li>
          <li>Total Files Received in CMS: {total_count}</li>
          <li>Total Evaluations Reports Ready: {success_count }</li>
          <li>Total Evaluations In progress: {transcribed_count}</li>
        </ul>
      </body>
    </html>
    """
    --------------------------
ALLURE FINAL

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest
    pip install allure-pytest
    pip install requests
    sudo apt-get update
    sudo apt-get install wget unzip -y
    wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.15.0/allure-commandline-2.15.0.zip -O allure.zip
    unzip allure.zip -d /opt
  displayName: 'Install dependencies and download Allure CLI'

- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)/allure-results
    pytest test/ccportal_api_automation.py --alluredir=$(Build.ArtifactStagingDirectory)/allure-results
    /opt/allure-2.15.0/bin/allure generate --single-file $(Build.ArtifactStagingDirectory)/allure-results -o $(Build.ArtifactStagingDirectory)/allure-report
  displayName: 'Run pytest and generate Allure report'

- task: PublishPipelineArtifact@1
  displayName: 'Publish HTML Report'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/allure-report'
    ArtifactName: 'AllureReport'


- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # SMTP configuration for Gmail
      $smtpServer = "smtp.gmail.com"
      $smtpPort = 587
      $from = "susmit.s.surwade@gmail.com"
      #$to = @("susmit.surwade@blenheimchalcot.com", "ruksar.khan@blenheimchalcot.com", "ami.jambusaria@blenheimchalcot.com")
      $to = @("susmit.surwade@blenheimchalcot.com")
      # Get today's date
      $todayDate = Get-Date -Format "dd-MM-yyyy"

      # Set the email subject
      $subject = "Daily Production API Automation report for $todayDate"

      # SMTP credentials
      $username = "susmit.s.surwade@gmail.com"
      $password = "qzod ltfm nmav tqvw"

      # Email body
      $emailBody = "Please find the attached Allure report for the pytest API execution."

      # Path to the HTML report
      $attachmentPath = "$(Build.ArtifactStagingDirectory)/allure-report/index.html"
      # Send email with attached Allure report using TLS/SSL
      $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)
      Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -From $from -To $to -Subject $subject -Body $emailBody -Attachments $attachmentPath -Credential $credential -UseSsl
  displayName: 'Send Email with attached Allure report'
-----------------------------------------------------------------
Azure pipeline 4 allure > access issue
trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install pytest
    pip install allure-pytest
    pip install requests
    sudo apt-get update
    sudo apt-get install wget unzip -y
    wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.15.0/allure-commandline-2.15.0.zip -O allure.zip
    unzip allure.zip -d /opt
  displayName: 'Install dependencies and download Allure CLI'

- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)/allure-results
    pytest test/ccportal_api_automation.py --alluredir=$(Build.ArtifactStagingDirectory)/allure-results
    /opt/allure-2.15.0/bin/allure generate --single-file $(Build.ArtifactStagingDirectory)/allure-results -o $(Build.ArtifactStagingDirectory)/allure-report
  displayName: 'Run pytest and generate Allure report'

- task: PublishPipelineArtifact@1
  displayName: 'Publish HTML Report'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/allure-report'
    ArtifactName: 'AllureReport'


- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # SMTP configuration for Gmail
      $smtpServer = "smtp.gmail.com"
      $smtpPort = 587
      $from = "susmit.s.surwade@gmail.com"
      #$to = @("susmit.surwade@blenheimchalcot.com", "ruksar.khan@blenheimchalcot.com", "ami.jambusaria@blenheimchalcot.com")
      $to = @("susmit.surwade@blenheimchalcot.com")
      # Get today's date
      $todayDate = Get-Date -Format "dd-MM-yyyy"

      # Set the email subject
      $subject = "Daily Production API Automation report for $todayDate"

      # SMTP credentials
      $username = "susmit.s.surwade@gmail.com"
      $password = "qzod ltfm nmav tqvw"

      # Email body
      $emailBody = "Please find the attached Allure report for the pytest API execution."

      # Path to the HTML report
      $attachmentPath = "$(Build.ArtifactStagingDirectory)/allure-report/index.html"
      # Send email with attached Allure report using TLS/SSL
      $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
      $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)
      Send-MailMessage -SmtpServer $smtpServer -Port $smtpPort -From $from -To $to -Subject $subject -Body $emailBody -Attachments $attachmentPath -Credential $credential -UseSsl
  displayName: 'Send Email with attached Allure report'
